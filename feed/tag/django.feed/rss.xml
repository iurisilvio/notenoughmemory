<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>iurisilvio - django</title><link>https://iurisilv.io/</link><description></description><lastBuildDate>Mon, 09 Jan 2023 00:00:00 -0300</lastBuildDate><item><title>Faster Django migrations with django-migrations-ci</title><link>https://iurisilv.io/2023/01/faster-django-migrations-with-django-migrations-ci.html</link><description>&lt;p&gt;Django migrations are really slow. It is an &lt;a href="https://code.djangoproject.com/ticket/29898"&gt;open issue&lt;/a&gt; for years.
It was even an &lt;a href="https://gist.github.com/aryan9600/b1c2eaf445006c17e02e7677cf1098d5"&gt;Google Summer of Code proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For small projects, it take some seconds to run all your migrations and it is fine. A few developers
can work on it for a long time. For a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Mon, 09 Jan 2023 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:iurisilv.io,2023-01-09:/2023/01/faster-django-migrations-with-django-migrations-ci.html</guid><category>programming</category><category>python</category><category>django</category></item><item><title>Django Sessions to cache</title><link>https://iurisilv.io/2021/04/django-sessions-to-cache.html</link><description>&lt;p&gt;Django sessions works great since the begining, you can do a site with them and
never really understand how sessions works, but you can't scale to thousands of
simultaneous users writing all your sessions to database. The database can be a
huge bottleneck here and you should remove all unnecessary …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Wed, 28 Apr 2021 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:iurisilv.io,2021-04-28:/2021/04/django-sessions-to-cache.html</guid><category>programming</category><category>python</category><category>django</category></item><item><title>My Django contributions</title><link>https://iurisilv.io/2021/03/my-django-contributions.html</link><description>&lt;p&gt;I started contributing to Django core after a failure in our project.&lt;/p&gt;
&lt;p&gt;I had to rename a model attribute without touching our database. The solution
was simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Simple attribute to rename.&lt;/span&gt;
&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 1. Add db_column param.&lt;/span&gt;
&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 2. Change the attribute name …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Wed, 17 Mar 2021 00:00:00 -0300</pubDate><guid isPermaLink="false">tag:iurisilv.io,2021-03-17:/2021/03/my-django-contributions.html</guid><category>programming</category><category>python</category><category>django</category></item><item><title>Faster parallel pytest-django</title><link>https://iurisilv.io/2021/03/faster-parallel-pytest-django.html</link><description>&lt;p&gt;We at Buser recently migrated from Django unittests to pytest. It is amazing
how much you can improve your tests with pytest.&lt;/p&gt;
&lt;p&gt;Unfortunately our CI/CD was really slow after this change.&lt;/p&gt;
&lt;p&gt;I discovered parallel &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-django&lt;/span&gt;&lt;/tt&gt; do their setup different than Django
unittests. Django create a template database and copy …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Mon, 08 Mar 2021 08:00:00 -0300</pubDate><guid isPermaLink="false">tag:iurisilv.io,2021-03-08:/2021/03/faster-parallel-pytest-django.html</guid><category>programming</category><category>python</category><category>django</category><category>pytest</category></item><item><title>Honeycomb Django tricks</title><link>https://iurisilv.io/2021/01/honeycomb-django-tricks.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://www.honeycomb.io/"&gt;Honeycomb&lt;/a&gt; is the observability tool we use everyday at &lt;a class="reference external" href="https://www.buser.com.br/"&gt;Buser&lt;/a&gt;. They help us tracking application bottlenecks, slow database queries, slow requests, requests with too many queries and much more.&lt;/p&gt;
&lt;p&gt;Their automatic instrumentation with &lt;a class="reference external" href="https://docs.honeycomb.io/getting-data-in/python/beeline/"&gt;beeline&lt;/a&gt; is a good start, but at some point we had to extend the default behaviour.&lt;/p&gt;
&lt;div class="section" id="custom-request-data"&gt;
&lt;h2&gt;Custom …&lt;/h2&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iuri de Silvio</dc:creator><pubDate>Sun, 10 Jan 2021 08:00:00 -0300</pubDate><guid isPermaLink="false">tag:iurisilv.io,2021-01-10:/2021/01/honeycomb-django-tricks.html</guid><category>programming</category><category>python</category><category>django</category><category>honeycomb</category></item></channel></rss>