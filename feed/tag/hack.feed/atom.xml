<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>iurisilvio - hack</title><link href="https://iurisilv.io/" rel="alternate"></link><link href="https://iurisilv.io/feed/tag/hack.feed/atom.xml" rel="self"></link><id>https://iurisilv.io/</id><updated>2012-07-19T00:00:00-03:00</updated><entry><title>ASP.NET MaskedEdit is broken in WebKit</title><link href="https://iurisilv.io/2012/07/aspnet-maskededit-is-broken-in-webkit.html" rel="alternate"></link><published>2012-07-19T00:00:00-03:00</published><updated>2012-07-19T00:00:00-03:00</updated><author><name>Iuri de Silvio</name></author><id>tag:iurisilv.io,2012-07-19:/2012/07/aspnet-maskededit-is-broken-in-webkit.html</id><summary type="html">&lt;p&gt;Ajax Control Tookit is one of an important library in .NET world. It handles a lot of dynamic JavaScript things you do not want to do alone.&lt;/p&gt;
&lt;p&gt;They have a component called MaskedEdit to handle a input formatted text like &lt;tt class="docutils literal"&gt;__/__/__&lt;/tt&gt;. Take a look at the &lt;a class="reference external" href="http://www.asp.net/ajaxLibrary/AjaxControlToolkitSampleSite/MaskedEdit/MaskedEdit.aspx"&gt;MaskedEdit example …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ajax Control Tookit is one of an important library in .NET world. It handles a lot of dynamic JavaScript things you do not want to do alone.&lt;/p&gt;
&lt;p&gt;They have a component called MaskedEdit to handle a input formatted text like &lt;tt class="docutils literal"&gt;__/__/__&lt;/tt&gt;. Take a look at the &lt;a class="reference external" href="http://www.asp.net/ajaxLibrary/AjaxControlToolkitSampleSite/MaskedEdit/MaskedEdit.aspx"&gt;MaskedEdit example&lt;/a&gt;. Oh, if you use Chrome or Safari, it does not work like you expect with delete, backspace and other &amp;quot;special&amp;quot; keys. Cool, han?&lt;/p&gt;
&lt;p&gt;This bug is from 2008, documented in &lt;a class="reference external" href="http://ajaxcontroltoolkit.codeplex.com/workitem/26978"&gt;issue 26978&lt;/a&gt;, &lt;a class="reference external" href="http://ajaxcontroltoolkit.codeplex.com/workitem/17166"&gt;issue 17166&lt;/a&gt; and &lt;a class="reference external" href="http://code.google.com/p/chromium/issues/detail?id=3341"&gt;chromium issue 3341 too&lt;/a&gt;. These links have easy solutions: just take the code, change a couple of lines and recompile everything, but it was never merged or released.&lt;/p&gt;
&lt;p&gt;I do not want to fork the code to change two lines, but I can just hack around JavaScript and we are fine. If you opened the MaskedEdit example in Chrome, run the code below in JavaScript console and try again. I took some pieces of code around the internet and wrote my own to work with normal and minified versions of current version of the lib.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Safari&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// don't worry, to this lib Chrome is Safari
&lt;/span&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;funcbody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Extended&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MaskedEditBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ExecuteNav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'var c=-1,e=&amp;quot; &amp;quot;,a=&amp;quot;&amp;quot;,b=false,d=true,p=&amp;quot;keypress&amp;quot;,s=&amp;quot;keydown&amp;quot;,evt=g,scanCode=h;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="nx"&gt;funcbody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_ExecuteNav&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(g\.type==p\)if\(h==8\))/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g.type==s||$1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(== Sys\.Browser\.InternetExplorer \|\| evt\.type == \&amp;quot;keypress\&amp;quot;)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s2"&gt;&amp;quot;$1 || evt.type == \&amp;quot;keydown\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The problem happens because the &lt;tt class="docutils literal"&gt;MaskedEditBehavior&lt;/tt&gt; handles only &lt;tt class="docutils literal"&gt;keypress&lt;/tt&gt; event (or bypass IE browsers). My hack just changes it to handle &lt;tt class="docutils literal"&gt;keydown&lt;/tt&gt; too, because &lt;a class="reference external" href="http://www.w3.org/TR/2010/WD-DOM-Level-3-Events-20100907/#event-type-keypress"&gt;W3C says&lt;/a&gt; &amp;quot;dispatch this event when a key is pressed down, if and only if that key normally produces a character value&amp;quot;.&lt;/p&gt;
&lt;p&gt;This hack solved the issue to me and is running in production now, but it is a big reason to avoid Ajax Control Toolkit if you can. Maybe they will not support you.&lt;/p&gt;
</content><category term="programming"></category><category term="csharp"></category><category term="hack"></category><category term="issue"></category></entry><entry><title>Some ways to remove a Facebook post</title><link href="https://iurisilv.io/2012/05/some-ways-to-remove-a-facebook-post.html" rel="alternate"></link><published>2012-05-06T00:00:00-03:00</published><updated>2012-05-06T00:00:00-03:00</updated><author><name>Iuri de Silvio</name></author><id>tag:iurisilv.io,2012-05-06:/2012/05/some-ways-to-remove-a-facebook-post.html</id><summary type="html">&lt;p&gt;During my adventures developing &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/cgdkiknkffmdbonojkcofooaampcefom"&gt;FunBlocker&lt;/a&gt;, I needed to hide some Facebook posts.&lt;/p&gt;
&lt;p&gt;Here is some of my code history in GitHub, analysing my different solutions to this problem.&lt;/p&gt;
&lt;div class="section" id="just-hide-it"&gt;
&lt;h2&gt;Just hide it&lt;/h2&gt;
&lt;p&gt;My first solution was just hide the post with CSS &lt;tt class="docutils literal"&gt;display:none&lt;/tt&gt;, when I still ran it with &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/abdogfafejmdomllalkdegagoehgbdbk"&gt;JavaScript …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;During my adventures developing &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/cgdkiknkffmdbonojkcofooaampcefom"&gt;FunBlocker&lt;/a&gt;, I needed to hide some Facebook posts.&lt;/p&gt;
&lt;p&gt;Here is some of my code history in GitHub, analysing my different solutions to this problem.&lt;/p&gt;
&lt;div class="section" id="just-hide-it"&gt;
&lt;h2&gt;Just hide it&lt;/h2&gt;
&lt;p&gt;My first solution was just hide the post with CSS &lt;tt class="docutils literal"&gt;display:none&lt;/tt&gt;, when I still ran it with &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/abdogfafejmdomllalkdegagoehgbdbk"&gt;JavaScript Injector&lt;/a&gt; and jQuery. It was an easy task, &lt;a class="reference external" href="https://github.com/iurisilvio/FunBlocker/blob/2853f5f6473153d1ebf6b9154bf98724429a2e01/main.js#L7"&gt;my first commit had only 12 lines of code&lt;/a&gt;. You can check the whole code there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remove-dom-element"&gt;
&lt;h2&gt;Remove DOM element&lt;/h2&gt;
&lt;p&gt;When I turned FunBlocker in a Chrome Extension, I decided not to depend on &lt;a class="reference external" href="http://www.jquery.com"&gt;jQuery&lt;/a&gt;, because it will run in background of Facebook and should not slow down the timeline performance. Or maybe I decided that because I never had programmed these basic things without jQuery.&lt;/p&gt;
&lt;p&gt;So, I find a link in a post I want to remove from the DOM.&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="c"&gt;&amp;lt;!-- Facebook HTML posts tree looks like this --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;storyContent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            [your friend sharing some shit here]
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Page I do not want here&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I search for links and get the parent element with class containing &lt;tt class="docutils literal"&gt;storyContent&lt;/tt&gt;. After that, I call &lt;tt class="docutils literal"&gt;remove_story&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;remove_story&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;story&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagName&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;'UL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It was more code than my first version, but I learnt a lot without the jQuery dependency. At this moment, I had &lt;a class="reference external" href="https://github.com/iurisilvio/FunBlocker/blob/b57200734740e31c7505d9ab737041945943b7dd/fb.js#L14"&gt;62 lines of code&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="click-hide-story"&gt;
&lt;h2&gt;Click Hide Story&lt;/h2&gt;
&lt;p&gt;Facebook has an option in menu to remove the content from your timeline. How can I use it? Without jQuery it is not a streight forward task. The code below do almost the same thing than &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$(element).click()&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code javascript literal-block"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;event_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MouseEvents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;event_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// event type, bubbling, cancelable
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// element is the link I want to click
&lt;/span&gt;    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Yes, sometimes it works. Other times Facebook just do not have the link I want because it is dinamically loaded. To solve this problem, I want to trigger the loading and after that click the button I need.&lt;/p&gt;
&lt;p&gt;I preferred another approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mimic-facebook"&gt;
&lt;h2&gt;Mimic Facebook&lt;/h2&gt;
&lt;p&gt;I know the click discussed above trigger some action to Facebook servers. The &lt;tt class="docutils literal"&gt;Hide Story&lt;/tt&gt; button triggers a HTTP call to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://www.facebook.com/ajax/feed/filter_action/uninteresting/?__a=1&lt;/span&gt;&lt;/tt&gt; with some trick parameters. If I do the same thing, everything works.&lt;/p&gt;
&lt;p&gt;After some research and reverse engineering in Facebook messages, JavaScript and HTML, I understanded a bit about what are these parameters and how to do this one call to Facebook.&lt;/p&gt;
&lt;p&gt;To be honest, I do not know how exactly it works, but it is there and makes my timeline better everyday. If you need something like that, take a look at &lt;a class="reference external" href="https://github.com/iurisilvio/FunBlocker/blob/5a0070ce5a6df8d49e41a58aa66801dcf3e90afe/fb.js#L119"&gt;try_default_hide function&lt;/a&gt;. I spent some days to solve this problem and did not found documentation about it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="funblocker"></category><category term="hack"></category></entry><entry><title>Funblocker: Clean Your Facebook Timeline</title><link href="https://iurisilv.io/2011/12/funblocker-clean-your-facebook-timeline.html" rel="alternate"></link><published>2011-12-03T00:00:00-02:00</published><updated>2011-12-03T00:00:00-02:00</updated><author><name>Iuri de Silvio</name></author><id>tag:iurisilv.io,2011-12-03:/2011/12/funblocker-clean-your-facebook-timeline.html</id><summary type="html">&lt;p&gt;Facebook is a cool way to see what your friends are doing. Social network, that is what we want. But things does not work like we want all the time.&lt;/p&gt;
&lt;p&gt;People create a lot of annoying profiles and pages to share/repost funny pictures and things like that. Most part …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Facebook is a cool way to see what your friends are doing. Social network, that is what we want. But things does not work like we want all the time.&lt;/p&gt;
&lt;p&gt;People create a lot of annoying profiles and pages to share/repost funny pictures and things like that. Most part of these images are copied from other major sites, so I already saw it before. Also, Facebook invent all the time new ways to share things you do not want to see. Finally, my timeline was polluted by all these things.&lt;/p&gt;
&lt;p&gt;A cruel solution is block all my friends sharing this content. Sometimes they did not even know they are sharing these trash. I don't want to do it, because, you know, I really like my friends, even though they are a bit stupid sometimes, so I need a better solution. Hey, Facebook, I want only content generated by my friends, not spams and cool-ish images.&lt;/p&gt;
&lt;p&gt;I created &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/cgdkiknkffmdbonojkcofooaampcefom"&gt;FunBlocker&lt;/a&gt;, a Chrome Extension to handle this problem, removing some posts I do not want to see in my timeline. Just right-click on the link and remove this post or click in a button on page hovercard. That is it. This way Ican spend more time doing what I want to do: just stalk my friends.&lt;/p&gt;
&lt;p&gt;It was a personal tool, but friends begged for it, so I released it open source, mainly because I will never install an extension which can handle my Facebook data and I can not see what is happening in the background. So, &lt;a class="reference external" href="http://github.com/iurisilvio/FunBlocker"&gt;FunBlocker code is on GitHub&lt;/a&gt;.&lt;/p&gt;
</content><category term="programming"></category><category term="funblocker"></category><category term="hack"></category></entry><entry><title>Cracking Captchas</title><link href="https://iurisilv.io/2010/10/cracking-captchas.html" rel="alternate"></link><published>2010-10-30T00:00:00-02:00</published><updated>2010-10-30T00:00:00-02:00</updated><author><name>Iuri de Silvio</name></author><id>tag:iurisilv.io,2010-10-30:/2010/10/cracking-captchas.html</id><summary type="html">&lt;p&gt;During PythonBrasil[6], we discussed about cracking captchas. I already worked on it to automate some tasks with a stupid captcha. A lot of internet voting systems and forms security are based on captcha.&lt;/p&gt;
&lt;img alt="Captcha" src="https://iurisilv.io/images/cracking-captchas/original.jpg" /&gt;
&lt;p&gt;It is really easy to clean the image with some Python tools.&lt;/p&gt;
&lt;img alt="Captcha cleaned" src="https://iurisilv.io/images/cracking-captchas/cleaned.jpg" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;During PythonBrasil[6], we discussed about cracking captchas. I already worked on it to automate some tasks with a stupid captcha. A lot of internet voting systems and forms security are based on captcha.&lt;/p&gt;
&lt;img alt="Captcha" src="https://iurisilv.io/images/cracking-captchas/original.jpg" /&gt;
&lt;p&gt;It is really easy to clean the image with some Python tools.&lt;/p&gt;
&lt;img alt="Captcha cleaned" src="https://iurisilv.io/images/cracking-captchas/cleaned.jpg" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="n"&gt;color_original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;color_bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color_original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color_bw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;captcha.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;convert_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cleaned_captcha.tif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TIFF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, using &lt;a class="reference external" href="http://code.google.com/p/pytesser/"&gt;pytesser&lt;/a&gt; (an OCR tool), I can just read the cleaned_captcha.tif file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytesser&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;image_file_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cleaned_captcha.tif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result is &lt;tt class="docutils literal"&gt;LONMT&lt;/tt&gt;. Wrong! It should be &lt;tt class="docutils literal"&gt;LONMH&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Just take a close look to the cleaned image. It has a black border, which cause some noise to pytesser. I removed this border and tried again. Now, the result is what I expected: &lt;tt class="docutils literal"&gt;LONMH&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Of course some captchas are really difficult to crack, but a lot of sites are based in useless captchas which any robot can solve. It is a crafted work, but it can be really easy in some cases. The two major problems I had to solve other cases of these captcha are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OCR misunderstood lower and upper case letters. This captcha has only upper case letters, so I can just replace &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;L&lt;/tt&gt; for example.&lt;/li&gt;
&lt;li&gt;OCR found two text lines in the image, so the output was in a wrong order. I solved this issue splitting the image in several images and reading one at a time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a final note but unrelated note, &lt;a class="reference external" href="http://www.websearchsocial.com/should-you-use-a-captcha-spoiler-no"&gt;DO NOT USE CAPTCHAS&lt;/a&gt;.&lt;/p&gt;
</content><category term="programming"></category><category term="python"></category><category term="hack"></category></entry></feed>