<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>iurisilvio - multithreading</title><link href="https://iurisilv.io/" rel="alternate"></link><link href="https://iurisilv.io/feed/tag/multithreading.feed/atom.xml" rel="self"></link><id>https://iurisilv.io/</id><updated>2012-09-03T00:00:00-03:00</updated><entry><title>Python thread pool</title><link href="https://iurisilv.io/2012/09/python-thread-pool.html" rel="alternate"></link><published>2012-09-03T00:00:00-03:00</published><updated>2012-09-03T00:00:00-03:00</updated><author><name>Iuri de Silvio</name></author><id>tag:iurisilv.io,2012-09-03:/2012/09/python-thread-pool.html</id><summary type="html">&lt;p&gt;It is just a small note about a hidden-ish Python feature. Looking for a thread pool solution, I found the threading module has no support to it.&lt;/p&gt;
&lt;p&gt;The most common answers talk about &lt;a class="reference external" href="http://code.google.com/p/pythonthreadpool/"&gt;pythonthreadpool library&lt;/a&gt; or &lt;a class="reference external" href="http://code.activestate.com/recipes/302746-simplest-useful-i-hope-thread-pool-example/"&gt;some ActiveState cookbook recipe&lt;/a&gt;. I'm pretty sure it solves the problem, but that is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is just a small note about a hidden-ish Python feature. Looking for a thread pool solution, I found the threading module has no support to it.&lt;/p&gt;
&lt;p&gt;The most common answers talk about &lt;a class="reference external" href="http://code.google.com/p/pythonthreadpool/"&gt;pythonthreadpool library&lt;/a&gt; or &lt;a class="reference external" href="http://code.activestate.com/recipes/302746-simplest-useful-i-hope-thread-pool-example/"&gt;some ActiveState cookbook recipe&lt;/a&gt;. I'm pretty sure it solves the problem, but that is not how Python should work.&lt;/p&gt;
&lt;p&gt;If you take a look at &lt;tt class="docutils literal"&gt;multiprocessing.dummy&lt;/tt&gt; module, you will find it has a Pool implementation using the &lt;tt class="docutils literal"&gt;threading&lt;/tt&gt; module. I don't know why it is not properly documented, but it replicates multiprocessing pool, so that is exactly what I need.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.dummy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# run something cool here&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check &lt;a class="reference external" href="http://docs.python.org/library/multiprocessing.html#module-multiprocessing.pool"&gt;multiprocessing.Pool docs&lt;/a&gt;.&lt;/p&gt;
</content><category term="programming"></category><category term="python"></category><category term="multithreading"></category></entry></feed>